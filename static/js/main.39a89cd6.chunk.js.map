{"version":3,"sources":["serviceWorker.js","components/TodoItem.js","components/TodosList.js","components/Header.js","components/InputTodo.js","components/TodoContainer.js","index.js","logo.svg"],"names":["Boolean","window","location","hostname","match","TodoItem","this","props","todo","completed","id","title","className","type","checked","onChange","handleChangeProps","onClick","deleteTodoProps","React","Component","TodosList","todos","map","key","Header","style","fontSize","marginBottom","InputTodo","state","e","setState","target","name","value","handleSubmit","preventDefault","addTodoProps","onSubmit","placeholder","TodoContainer","addTodoItem","console","log","newTodo","uuidv4","handleChange","delTodo","filter","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.39a89cd6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\n\r\n\r\nclass TodoItem extends React.Component {\r\n  render() {\r\n    const { completed, id, title } = this.props.todo\r\n    return (\r\n    <li className=\"todo-item\">\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={completed}\r\n        onChange={() => this.props.handleChangeProps(id)}\r\n      />\r\n      <button onClick={() => this.props.deleteTodoProps(id)}>\r\n        Delete\r\n      </button>\r\n\r\n      {title}\r\n    </li>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TodoItem;","import React from \"react\"\r\nimport TodoItem from \"./TodoItem\";\r\n\r\n\r\nclass TodosList extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n      {this.props.todos.map(todo => (\r\n          // <li key={todo.id}>{todo.title}</li>\r\n          <TodoItem key={todo.id} todo={todo} handleChangeProps={this.props.handleChangeProps} deleteTodoProps={this.props.deleteTodoProps}/>\r\n    ))}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TodosList;","import React from \"react\";\r\n\r\nconst Header = () => {\r\n    return(\r\n        <header>\r\n        <h1 style={{ fontSize: \"25px\", marginBottom: \"15px\" }}>Simple Todo App</h1>\r\n        <p style={{ fontSize: \"19px\" }}>\r\n          Please add to-dos item(s) through the input field\r\n        </p>\r\n      </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React, { Component } from \"react\"\r\n\r\nclass InputTodo extends Component {\r\n  state = {\r\n    title: \"\"\r\n  };\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className=\"form-container\">\r\n        <input type=\"text\" placeholder=\"Add Todo...\" className=\"input-text\" name=\"title\" value={this.state.title} onChange={this.onChange} />\r\n        <input type=\"submit\" value=\"Submit\" className=\"input-submit\"/>\r\n      </form>\r\n    )\r\n  }\r\n\r\n  onChange = e => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.addTodoProps(this.state.title);\r\n    this.setState({\r\n      title: \"\"\r\n    });\r\n  };\r\n}\r\nexport default InputTodo","import React from 'react';\r\nimport TodosList from \"./TodosList\";\r\nimport Header from \"./Header\";\r\nimport InputTodo from \"./InputTodo\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nclass TodoContainer extends React.Component {\r\n\r\n  state = {\r\n    todos: [\r\n      {\r\n        id: 1,\r\n        title: \"todo 1\",\r\n        completed: true\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"todo 2\",\r\n        completed: false\r\n      },\r\n      {\r\n        id: 3,\r\n        title: \"todo 3\",\r\n        completed: false\r\n      }\r\n    ]\r\n   };\r\n\r\n    render() {\r\n      return (\r\n        <div className=\"container\">\r\n          <Header />\r\n          <InputTodo addTodoProps={this.addTodoItem}/>\r\n          <TodosList todos={this.state.todos} handleChangeProps={this.handleChange} deleteTodoProps={this.delTodo}/>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    addTodoItem = title => {\r\n      console.log(title);\r\n      const newTodo = {\r\n        id: uuidv4(),\r\n        title: title,\r\n        completed: false\r\n      };\r\n      this.setState({\r\n        todos: [...this.state.todos, newTodo]\r\n      });\r\n    };\r\n\r\n    handleChange = (id) => {\r\n      console.log(\"clicked\", id);\r\n      this.setState({\r\n        todos: this.state.todos.map(todo => {\r\n          if (todo.id === id) {\r\n            todo.completed = !todo.completed;\r\n          }\r\n          return todo;\r\n        })\r\n      });\r\n    };\r\n\r\n    delTodo = id => {\r\n      console.log(\"deleted\", id);\r\n      this.setState({\r\n        todos: [\r\n          ...this.state.todos.filter(todo => {\r\n            return todo.id !== id;\r\n          })\r\n        ]\r\n      });\r\n    };\r\n}\r\n\r\nexport default TodoContainer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport TodoContainer from \"./components/TodoContainer\"\nimport \"./App.css\"\n\nReactDOM.render(<TodoContainer />, document.getElementById(\"root\"))\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}